## C#程序结构介绍

### 主要内容

1. 了解Visual studio 集成开发环境
2. 了解面向对象思想
3. 第一个程序介绍、讲解和练习
4. 高质量编码准则
5. 稍微复杂的评分程序讲解
6. 同学添加注释进行练习
    
### 详细内容

#### 介绍Visual studio集成开发环境
    
+ 工作界面介绍
    启动Visual Studio 2015，进入主工作界面如下图所示。在菜单栏或工具栏中选择操作命令；在代码文本编辑区输入代码进行编程；在浮动窗口“解决方案资源管理器”对项目文件进行管理。
    
+ 常用浮动窗口
    解决方案资源管理器窗口：提供项目及其文件的组织视图；

    错误列表窗口：为错误代码提供即时的提示和可能的解决方法；
    
    输出窗口：提示项目的生成情况。

    
+ 文本编辑器

    双击【解决方案资源管理器】中一个.cs源文件，这个源文件就会在文本编辑器中打开。我们在这里编写C#代码，它有以下几个值得关注的特征。
    用不同的颜色高亮显示不同的语法元素。

    根据代码结构自定义代码格式；行号显示；智能感知；语法检查。


 + 创建第一个项目

    我们现在在Visual studio中创建第一个C#控制台应用程序，选好名称和位置后，点击确认即可。这里要注意的是，IDE会默认给我们生产程序的名称和生成的位置，
    名称最好改为自己理解的英文名称，位置选择最好放在你经常放文档或其他资料的盘符，最好不要放在系统盘C盘。

    创建后，我们会看到，在解决方案资源管理器窗口中已经生成了一个项目，并自动的为我们生成了一个Program文件，在文件编辑器中现实的文本就是C#程序代码。
    
    现在我们Crtl+F5执行以下，看会有什么结果。
	
    我们看到，除了在输出窗口输出很多的描述信息，一个莫名的窗口一闪而过，好像什么也没干。
    
    对于输出窗口中输出的信息具体描述信息都说了些什么我们以后再讲。
    
    现在对大部分同学来说，也许现在对Program.cs文件中这一行行代码是什么意思也不清楚，没关系，我们还是介绍一下世界的面向对象抽象方法，也许再回来更加清晰明了。

### 简单了解面相对象中的类、对象、属性和方法并介绍第一个程序

*Action1:* 同学A上台介绍自己对面向对象思想的理解

*Action2:* 自己进行适当的补充

*Action3:* 第一个HelloWorld程序讲解

C#程序的结构是命名空间包含类，类包含函数。

命名空间：相当于一个个文件夹，这些文件夹里存放着不同的文件（类）。

`namespace`用来自定义一个命名空间

using 用来导入命名空间

类：在C#中由class关键字定义

Main就是类HelloWorld的方法，也叫做函数，只是这个方法比较特殊，Main是一个全局静态函数，又叫主函数。它指示编译器从此处开始执行程序，相当于程序的入口。

#### 输出函数WriteLine基本用法介绍

下面我们试着打印一条信息:

    Console.WriteLine("Hellow World!");
    Console.WriteLine("Press any key to continue ... ");
    ConSole.ReadKey(true);

`WriteLine`是向终端输出信息并换行，`ReadKey`函数是读取键盘上任意的一个字符。

#### 语法元素

### CRS一体机系统项目实战

#### 任务目标
    
+ 使用Visual Studio 2015创建CRS系统项目
+ 输出CRS系统开机界面
+ 为代码添加注释

### 稍微复杂的评分程序讲解

**问题:** 如何将一个问题、公式转换成代码？

+ 使用伪代码和流程图的重要性

用伪代码的目的是使被描述的算法可以容易地以任何一种编程语言（Pascal，C，Java等）实现。因此，结构清晰、代码简单、可读性好，并且类似自然语言的伪代码更可以清晰的表达实现过程，并帮助开发人员总体上去考虑整个功能的实现，而且写好的伪代码可以用来作为以后程序测试、维护的基础，也能更好的与他人沟通。
    
### 高质量编码准则

一个好的编码规范，可以从可读性、可靠性、维护性、重用性、高效性等方面去要求，当然，对于初学者首先要从编写可读性的代码做起，其他方面是日渐功深的过程，也是随着经验和认识增广，不断提高和完善的过程，正所谓没有最好，只有更好。

而要编写一个可读性的代码，可以增强代码的阅读性，这样在团队开发和程序维护的过程中很重要。

那么提高代码质量要遵循如下准则：

1. 布局、书写清晰

```
do {请同学读重要规则}

do {使用Visual studio IDE帮助我们限制一行最多80个字符的限制}
```

2. 标识符命名规范、合理

```
do {请同学读重要规则}
```

除了课本上提到的这些硬性规范，在团队开发过程中，通常也会制定统一的其他规范，如局部变量如何命名，类、类的方法、类的属性如何命名等等。好的命名规范，可以很好的帮助代码各个变量类型的理解，如像我们看到的Program和Main方法都是大写，这样当我们一看到第一个字母是大写，就可以马上确定他们是类或方法，而不是定义的局部变量，详细要求我们一步步学习的过程中再一点点介绍。

3. 养成良好的注释习惯

在前面学习语法元素的时候，其中有几种注释，我们现在通过注释来完善代码。

```
do {学生回答有哪几种注释}

do {请同学在score代码上添加注释}
```

