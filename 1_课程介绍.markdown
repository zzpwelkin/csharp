## 课程初识

**问题：**

1. 为什么学习编程?
2. 什么是程序？
3. 什么是编程语言？
4. 怎样学习编程？


### 问题初探

#### 什么是程序？

> 由程序员用编程语言编写的，被计算机用来执行特定任务的指令集合。
    
这个概念可能太专业了点，但是一说 软件和手机App，我想大家都很熟悉，那软件就是程序吗？

如果从用户角度来说，可以大致这么任务，但是从一个开发人员来说，程序只是软件的子集。也即软件不仅包括可被计算机执行的指令集合，
括被操作的数据。

**问题：** 谈谈你们理解的数据？

对于更多的应用软件，对数据的操作永远是核心和第一任务。任何一样事物可以从不同的角度来看待，正所谓的横看成岭侧成峰，为了让你们
们所学前端开发方向有个全面的了解，今天我们从数据流，也即是数据的流向来做一个整体的了解。

首先对于一个有经验的开发人员，一说到数据流首先会想到如下的基本处理流程：

    数据获取 -> 数据处理 -> 处理后数据的有效存储 -> 数据的呈现
    
* 首先从哪些途径可以获取数据呢？
* 如何对数据进行处理？
* 处理后的数据如何存储？
* 都有哪些途径和方式展现数据呢？
 
在上学期photoshop和html5学习和实践的过程中你们已经把上面的整条流程走了一遍，回顾一下上学期你们是如何准备素材、设计、保存组织并
有组织的编排的。但这只是开始，也是基础，而这小小的开始如果再深入的学习足以做一些平面设计类工作或者构建自己的博客甚至搭建以内容为主的网站，
正如你们最后实习的内容。

但是如果要更进一步，就需要学习和了解更多的内容，如这学期学习的基础编程、windows桌面开发以及数据的数据库存储，和后面两年要接触到的动态响应式开发等。

刚才在介绍程序概念的时候，提到编程语言，那么什么是编程语言呢？

#### 什么是编程语言？

对一个概念的理解和定义可以有很多种，我不要求你们去死记硬背，了解久了都是心领神会。不过为了不失偏颇，下面我引用维基百科上的定义：
    
> 编程语言是一种计算机可以理解的指令集合，通过一系列的指令以产生各种输出.（体）
> 编程语言可以用来创建程序以实现特定的算法.（用）

第一句可以说是编程语言的 *体*，也即是计算机可以理解的指令集合，第二句可以说是 *体*的*用*，也即是创建程序实现特定的算法。数据的处理离不开算法。

**问题：那么什么是算法呢？**
    
不管是初学者还是多年的开发人员，往往都会被算法吓到，因为觉得自己数学不好。在维基百科上算法是这样定义的：

> 执行一个被很好定义的任务就成为算法
    
所以算法的目的是为了完成特定的功能，因为计算机语言是科学发展的产物，自然在很多领域，如文件压缩、你们上学期学的photoshop中的锐化、羽化应用到专业的数学知识，像刚才举得例子需要线性代数的知识，但并不是所有的算法都需要如此的专业知识，像我们经常操作的放大和缩小，文件的打开和保存其实都可以称作算法。

我想每一位同学应该都知道了这学期我们要学习C#编程语言，只是为什么学这门编程语言，而不是其他的编程语言，如C，java，
也许也有同学对其他编程语言也很好奇，不时的想去咻一咻，那么下面我来介绍编程语言的发展史和编程语言家族。

大的来说编程语言经过了机器(二进制)语言、汇编语言和高级语言三个发展阶段。具体的发展阶段历史和概貌有兴趣的同学可以上网查找。

我在这里只说一点，语言的发展是随着计算机硬件的改进和发展进行演变的，尽管在今天仍然可以用二进制语言和汇编语言进行编程，但目的
和使用场合已完全不同，汇编语言更多的是为了用在提升算法的效率或用在单片机开发中。

而在这短短的50多年中，高级语言却如烟花般放出了灿烂的星光，到现在至少出现了两千多种高级编程语言，当然很多只是短暂的昙花一现，
甚至没有在天空划下任何的痕迹，也有很多随着发展越来越备受欢迎并在今天的生活中大展用武之地。下面我们主要来了解这些高级语言中的佼佼者，
我会由语言学习的难到易一层一层的进行介绍，当然难易也只是相对而言。

----------
首先要介绍的是重量级的嘉宾：C语言。
    
C语言我想大家应该不陌生，去网上查一下语言的排名，在最大使用量或最受欢迎的语言中这位老哥始终排在前面，虽然时而谦虚的让让位置，
稍微往后排排，但现在还没有哪门语言能与其平起平坐的。那为什么他这么牛呢？

这是因为在汇编语言之上，相比于其他高级语言，C语言描述更接近硬件，所以他也就具有更高的执行效率，被用在与硬件设备相关的底层开发，
从操作系统到与设备相关的驱动都是用C语言开发的；但正如CPU一条条顺序的执行指令一样，C语言是以函数(function)为结构单元进行顺序的执行，
所以称他为程化语言，而一个函数就相当于实现一个功能或算法的实现，如sin函数进行正弦计算，printf向终端(console)上打印信息。当让一个大的
软件是多个程序和数据的有机组合，而如何用过程化语言开发出稳定而灵活且满足需求的软件就需要一定的方法，这个在计算机专业俗语叫软件工程，
软件工程正如建筑或其他行业一样，有很多准则、规范和实践方法，正因为如此学计算机专业的学生都会学软件工程这门课。

随着应用程序在各个领域的应用，开发人员越来越不满足过程化开发方法对现实世界抽象过程的设计复杂性，于是一种对计算机硬件而言更加抽象的、
接近人类对世界认知的设计方式被创造，面相对象思想被提出并且出现了面相对象语言。

于是就有了C++，故名思意，C++其实就是C语言的升级版，是对C语言进行了一层概念上的转换，也即是用面向对象思想对C语言做了包装。
C和C++更详细的内容和历史大家下去查，在这里给你们留道作业题：

**问题：什么是面向对象思想?**
    
**问题: 过程化的C语言和面向对象思想的C++彼此相较有哪些优缺点？**
    
面相对象思想是如此的受欢迎，以致后来被设计的Java和C#是完全的面向对象语言，并且他们在设计的过程中也兼顾到了跨平台和执行效率问题，
，而相对年长的Java语言还有本身就具备多线程的特点，C#语言则被赋予了安全、高效开发的特性。同时随着面相对象思想在软件开发过程中的实践，
很多有效的开发原则、方法和设计技巧被发现而总结出来，一些好的最佳实践，如敏捷开发、极限编程等也在公司和开发团队被采用。

上面介绍的四门编程语言属于编译性语言，也即是至少要经过 文本代码编辑、编译器编译成机器可理解的二进制文件、执行三部。
而下面要介绍的脚本语言，都属于解释性语言，即他们都对应有自己的解释器，可以写一条语句执行一条语句，如你们在dos或bash中执行一条命令
就会出现一条结果一样。

一般来说解释性语言相对于编译性语言执行速度要慢很多，当然这也很他们的解释器实现由关系，但是学习起来简单，代码一般更简洁，
能够提升开发效率。这也就是现在为什么脚本语言越来越受欢迎的原因。
那么现在应用比较多的脚本语言有python,perl,ruby,php。python语言是比较强大的一门语言，现在在各个行业和领域都能看到他开发的程序，
如果把C/C++比作倚天剑，那python可以比作屠龙刀。

perl主要擅长于自然语言的处理，也即是文本语言的处理，ruby是日本一位教授开发的语言，现在也应用在很多领域，php则主要用在网站开发，
以前只要搭建网站，不二的选择则是LMAP，也即是Linux+mysql+apache+php。

而现在科技发展的是如此的迅速，各种新的终端设备如手机，被广泛使用，使得不论前后端开发都不断的提升自我，如最近使用的响应式开发，异步请求
等等。这些概念的提出和实现也使得本来很不受大家喜爱的javascript脚本语言由灰姑娘慢慢的成为备受青睐的公主，而你们也终将拜在他的石榴裙下。

当然，还有很多语言有其闪耀的特长而被用在特定的领域，如有并行运算能力的scala,erlang,go语言，苹果公司在C语言上发展起来的并且Object-c语言，
广泛应用在数学、物理和仿真等工科领域的matlab语言等。
    
 
#### 4. 怎样学习编程？
 
不知道从简单的介绍中有没有哪门语言触动你们的心扉？如果有兴趣的同学可以去做更深入的了解。
不过对于很多初学者而言语言只是工具，正如我们的自然语言一样，有效的组织成一篇歌词诗赋或文章后才能表达所思、所想。所以学习编程都要从先学习
基本的语法、如何实现一些算法、再到如何有效的组织算法和程序，使其满足我们的需求。而要从相见恨晚、到慢慢认识、再到得心应手，需要你们的多练、
多看、多记，并加上适当的理解。而且对学习编程来说，读并修改别人的代码是一种很快的学习方法。希望在后面的学习中不要因爱成仇，苦了自己。
 
说实在的，如果对于大学生，我会建议他们去学简单并且能提高学习积极性和自信性的python语言，因为相对你们而言，其实他们更缺少明确的方向和目标，
所以很多学校一开始先学C语言，学生学完了不会用，又不知怎么用，我是走了很多弯路才算豆子发芽-总算熬出来了。而你们的方向很明确，保持好奇和积极
的学习心态一定会学有所得、学有所用。

 
 
